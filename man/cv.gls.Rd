% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cv-timeseries.R
\name{cv.gls}
\alias{cv.gls}
\alias{Arima}
\alias{print.ARIMA}
\alias{update.ARIMA}
\alias{coef.ARIMA}
\alias{model.matrix.ARIMA}
\alias{predict.ARIMA}
\alias{cv.ARIMA}
\title{Cross-Validate Mixed-Effects Model}
\usage{
\method{cv}{gls}(
  model,
  data = insight::get_data(model),
  criterion = mse,
  k = 10L,
  reps,
  seed,
  criterion.name = deparse(substitute(criterion)),
  i.only = FALSE,
  details = k <= 10L,
  confint = n >= 400L,
  level = 0.95,
  ncores = 1L,
  ...
)

Arima(
  formula,
  data,
  subset = NULL,
  na.action = na.pass,
  order = c(1L, 0L, 0L),
  ...
)

\method{print}{ARIMA}(x, ...)

\method{update}{ARIMA}(object, ...)

\method{coef}{ARIMA}(object, ...)

\method{model.matrix}{ARIMA}(object, ...)

\method{predict}{ARIMA}(object, n.ahead, newdata = NULL, se.fit = FALSE, ...)

\method{cv}{ARIMA}(
  model,
  data = model$data,
  criterion = mse,
  k = 10L,
  reps,
  seed,
  i.only = FALSE,
  criterion.name = deparse(substitute(criterion)),
  details = k <= 10L,
  ncores = 1L,
  ...
)
}
\arguments{
\item{model}{an object of class \code{"gls"} produced by the
\code{\link[nlme]{gls}()} function, or of class \code{"ARIMA"}
produced by the \code{Arima()} function.}

\item{data}{data frame with the data to which the model was fit;
can usually be inferred from the model; for \code{Arima()}, a data
frame with data to which the model is to be fit.}

\item{criterion}{function to compute the CV cost criterion
(default \code{\link{mse}}).}

\item{k}{number of folds, an integer \eqn{\gt 2}; the default is \code{10}.}

\item{reps}{ignored (to match \code{\link{cv}()} generic function).}

\item{seed}{ignored (to match \code{\link{cv}()} generic function).}

\item{criterion.name}{name of the CV criterion; can usually be
inferred from \code{criterion}.}

\item{i.only}{if \code{TRUE} (the default is \code{FALSE}), predict
the response for cases in the i-th fold from the model fit to data
in the preceding fold \emph{only} rather than fit to data from \emph{all}
preceding folds.}

\item{details}{return fold-wise statistics, including the CV criterion
and parameter estimates for cases in each fold after the first;
the default is \code{TRUE} for \eqn{k \le 10}.}

\item{confint}{if \code{TRUE} (the default if \eqn{n \ge 400}), report
a confidence interval for the adjusted CV criterion.}

\item{level}{level for the confidence interval (default \code{0.95}).}

\item{ncores}{if \code{ncores} \eqn{> 1}, the computation is parallelized.}

\item{...}{further arguments to be passed to \code{\link{arima}()}
or \code{Arima()}.}

\item{formula}{either a one-sided formula giving the response variable
in an ARIMA model with no predictors, or a two-sided formula with the
response on the left and terms for the predictors on the right (as in
a typical R regression model).}

\item{subset}{subsetting expression.}

\item{na.action}{function to process missing data; the default,
\code{\link{na.pass}}, will pass missing data to the \code{\link{arima}()}
function.}

\item{order}{the \eqn{p, d, q} specification of the ARIMA model;
see \code{\link{arima}()} for details.}

\item{x}{an object of class \code{"ARIMA"}.}

\item{object}{an object of class \code{"ARIMA"}.}

\item{n.ahead}{number of future cases to predict.}

\item{newdata}{data frame with rows containing the
predictors (if any) for predicted future cases.}

\item{se.fit}{if \code{TRUE} (the default is \code{FALSE}), compute
the standard errors of the predictions.}
}
\value{
the \code{\link{cv}()} methods return objects of class \code{"cv"}.
\code{Arima()} returns an object of class \code{"Arima"} with the
following components: \code{formula}, the model formula; \code{data},
the data set to which the model was fit; \code{subset}, the subset
expression (if specified); \code{na.nation}, see \code{\link{na.pass}}; \code{order}, the
order of the ARIMA model; \code{call}, the function call;
\code{dots}, any other arguments specified; \code{arima},
the object returned by the \code{\link{arima}()} function,
which \code{Arima()} calls;
\code{response}, the response variable; \code{model.matrix},
the model matrix, if there are predictors in the model.
}
\description{
\code{\link{cv}()} methods for time-series models of class \code{"gls"}, fit
by \code{\link[nlme]{gls}()} in the \pkg{lme4} package, and
for models fit by \code{Arima()}, which provides a formula interface to the
\code{\link{arima}()}) function.
}
\section{Functions}{
\itemize{
\item \code{cv(gls)}: \code{cv()} method for \code{\link[nlme]{gls}()} models from the \pkg{nlme} package.

\item \code{Arima()}: model-formula wrapper for the \code{\link{arima}()} function.

\item \code{print(ARIMA)}: \code{print()} method for \code{"ARIMA"} objects
created by the \code{\link{Arima}()} function.

\item \code{update(ARIMA)}: \code{update()} method for \code{"ARIMA"} objects
created by the \code{\link{Arima}()} function.

\item \code{coef(ARIMA)}: \code{coef()} method for \code{"ARIMA"} objects
created by the \code{\link{Arima}()} function.

\item \code{model.matrix(ARIMA)}: \code{model.matrix()} method for \code{"ARIMA"} objects
created by the \code{\link{Arima}()} function.

\item \code{predict(ARIMA)}: \code{predict()} method for \code{"ARIMA"} objects
created by the \code{\link{Arima}()} function.

\item \code{cv(ARIMA)}: \code{cv()} method for \code{"ARIMA"} objects
created by the \code{\link{Arima}()} function.

}}
\examples{

# model from help("gls", package="nlme")
if (require("nlme", quietly=TRUE)){
withAutoprint({
fm1 <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), Ovary,
           correlation = corAR1(form = ~ 1 | Mare))
fm1
summary(cv(fm1, k=5, confint = TRUE))
summary(cv(fm1, k=5, confint = TRUE, i.only = TRUE))
})
}

if (require("stats", quietly=TRUE) &&
    require("datasets", quietly=TRUE)){
withAutoprint({
# model adapted from help("arima")
LH <- data.frame(lh = lh)
lh.arima <- Arima(~lh, data=LH)
lh.arima
summary(cv(lh.arima, k=5))
summary(cv(lh.arima, k=5, i.only=TRUE))

# model adapted from help("arima")
Lake <- data.frame(level=LakeHuron, year=time(LakeHuron))
lake.arima <- Arima(level ~ I(year - 1920), data=Lake,
                  order=c(2, 0, 0))
lake.arima
summary(cv(lake.arima, k=5))
summary(cv(lake.arima, k=5, i.only=TRUE))
})
}
}
